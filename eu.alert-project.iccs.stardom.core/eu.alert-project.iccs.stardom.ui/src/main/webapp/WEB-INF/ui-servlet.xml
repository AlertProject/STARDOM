<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
        default-autowire="byName"
        >

    <context:annotation-config/>
    <tx:annotation-driven/>


    <!-- Since we are spliting our jars then we need to define each
        separately -->
    <context:component-scan base-package="eu.alertproject.iccs.stardom"/>


    <!-- JSR303 -->
    <mvc:annotation-driven/>

    <!-- Resources -->
    <mvc:default-servlet-handler/>

    <!-- freemarker config -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="locale">el_GR</prop>
            </props>
        </property>
    </bean>

    <!--

      View resolvers can also be configured with ResourceBundles or XML files. If you need
      different view resolving based on Locale, you have to use the resource bundle resolver.

    -->


    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <property name="mediaTypes">
            <map>
		        <entry key="json" value="application/json" />
            </map>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >
                    <property name="contentType" value="application/json"/>
                </bean>
            </list>
        </property>
        <property name="ignoreAcceptHeader" value="true"/>
    </bean>

    <bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="order" value="2"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="cache" value="false"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:uimessages"/>
    </bean>



    <!-- Keeping this here for reference -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean
                    class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="false"/>
                <property name="databasePlatform"
                          value="org.hibernate.dialect.MySQLDialect"/>
            </bean>
        </property>
    </bean>

    <bean id="eventservice" class="eu.alertproject.iccs.stardom.bus.api.StardomEventService"

            />

    <bean id="eventbusInit" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.bushe.swing.event.EventServiceLocator"/>
        <property name="targetMethod" value="setEventService"/>
        <property name="arguments">
            <list>
                <!-- Be careful here, do not change the name of the service -->
                <value>EventBus</value>
                <ref bean="eventservice"/>
            </list>
        </property>
    </bean>


    <!--  Properties -->
    <bean id="alertPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:system.properties"/>
    </bean>

    <bean id="systemProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location">
            <value>classpath:system.properties</value>
        </property>
    </bean>


    <!--  The documentation specified that this will inject the the persistence unit into the class -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- ActiveMQ -->
        <bean   id="jmsConnectionFactory"
            class="org.apache.activemq.ActiveMQConnectionFactory" >
        <property name="brokerURL" value="${activemq.url}" />
        <property name="userName" value="" />
        <property name="password" value="" />
    </bean>

    <bean id="pooledJmsConnectionFactory"
          class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <bean id="jmsConfig"
          class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledJmsConnectionFactory"/>
        <property name="transacted" value="false"/>
        <property name="concurrentConsumers" value="10"/>
    </bean>

    <bean id="activemq"
          class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>

    <!-- Spring JMS Template -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledJmsConnectionFactory" />
        <property name="pubSubDomain" value="true"/>
    </bean>



    <!-- ActiveMQ Listeners -->
    <bean id="annotationService" class="eu.alertproject.iccs.stardom.ui.service.KEUIAnnotationService" />
    <bean id="textAnnotatedListener" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination">
            <bean
                class="org.apache.activemq.command.ActiveMQTopic">
                <constructor-arg>
                    <util:constant static-field="eu.alertproject.iccs.events.api.Topics.ALERT_KEUI_TextToAnnotate_Annotated"/>
                </constructor-arg>
            </bean>
        </property>
        <property name="messageListener"  ref="annotationService"/>
        <property name="recoveryInterval" value="60000"/>
        <property name="cacheLevel" value="3" />
    </bean>

    <!-- ActiveMQ Listeners -->
    <bean id="ALERT_METADATA_IdentityUpdate_Stored" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="destination">
            <bean
                class="org.apache.activemq.command.ActiveMQTopic">
                <constructor-arg>
                    <util:constant static-field="eu.alertproject.iccs.events.api.Topics.ALERT_METADATA_IdentityUpdate_Stored"/>
                </constructor-arg>
            </bean>
        </property>
        <property name="messageListener"  ref="mergeService"/>
        <property name="recoveryInterval" value="60000"/>
        <property name="cacheLevel" value="3" />
    </bean>


    <!--<bean id="mockupAnnotation" class="eu.alertproject.iccs.stardom.ui.service.MockupAnnotationListener" />-->
    <!--<bean id="mockupAnnotationListener" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="connectionFactory" ref="jmsConnectionFactory"/>-->
        <!--<property name="destination">-->
            <!--<bean-->
                <!--class="org.apache.activemq.command.ActiveMQTopic">-->
                <!--<constructor-arg>-->
                    <!--<util:constant static-field="eu.alertproject.iccs.events.api.Topics.ALERT_STARDOM_TextToAnnotate"/>-->
                <!--</constructor-arg>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="messageListener"  ref="mockupAnnotation"/>-->
        <!--<property name="recoveryInterval" value="60000"/>-->
        <!--<property name="cacheLevel" value="3" />-->
    <!--</bean>-->




    <bean id="tailer"
          class="eu.alertproject.iccs.stardom.ui.beans.LogTailer"
          destroy-method="stop"/>

    <!--<bean id="tailer" class="org.apache.commons.io.input.Tailer"-->
          <!--factory-method="create"-->
          <!--destroy-method="stop">-->
        <!--<constructor-arg>-->
            <!--<bean class="java.io.File">-->
                <!--<constructor-arg value="${log.file}"/>-->
            <!--</bean>-->
        <!--</constructor-arg>-->
        <!--<constructor-arg ref="logTailerListener">-->
        <!--</constructor-arg>-->
        <!--<constructor-arg value="5000"/>-->
        <!--<constructor-arg value="true"/>-->

    <!--</bean>-->


    <bean id="identifier" class="eu.alertproject.iccs.stardom.identifier.internal.DefaultIdentifier">
        <constructor-arg>
            <bean class="eu.alertproject.iccs.stardom.identifier.api.IdentifierWeightConfiguration">
                <constructor-arg><value>${identifier.threshold}</value></constructor-arg>
                <constructor-arg>
                        <bean class="eu.alertproject.iccs.stardom.identifier.api.LevelWeightConfiguration">
                            <constructor-arg><value>${identifier.weights.univocity}</value></constructor-arg>
                            <constructor-arg><value>${identifier.weights.valuesperuser}</value></constructor-arg>
                            <constructor-arg><value>${identifier.weights.misleading}</value></constructor-arg>
                        </bean>
                </constructor-arg>
                <constructor-arg>
                        <bean class="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration">
                            <constructor-arg>
                                <util:constant static-field="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration.Property.FIRSTNAME"/>
                            </constructor-arg>
                            <constructor-arg><value>${identifier.properties.firstname.ul}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.firstname.vpl}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.firstname.ml}</value></constructor-arg>
                        </bean>
                </constructor-arg>


                <constructor-arg>
                        <bean class="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration">
                            <constructor-arg>
                                <util:constant static-field="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration.Property.LASTNAME"/>
                            </constructor-arg>
                            <constructor-arg><value>${identifier.properties.lastname.ul}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.lastname.vpl}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.lastname.ml}</value></constructor-arg>
                        </bean>
                </constructor-arg>


                <constructor-arg>
                        <bean class="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration">
                            <constructor-arg>
                                <util:constant static-field="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration.Property.USERNAME"/>
                            </constructor-arg>
                            <constructor-arg><value>${identifier.properties.username.ul}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.username.vpl}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.username.ml}</value></constructor-arg>
                        </bean>
                </constructor-arg>

                <constructor-arg>
                        <bean class="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration">
                            <constructor-arg>
                                <util:constant static-field="eu.alertproject.iccs.stardom.identifier.api.PropertyWeightConfiguration.Property.EMAIL"/>
                            </constructor-arg>
                            <constructor-arg><value>${identifier.properties.email.ul}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.email.vpl}</value></constructor-arg>
                            <constructor-arg><value>${identifier.properties.email.ml}</value></constructor-arg>
                        </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>

    </bean>

</beans>